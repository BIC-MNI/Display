dnl Process this file with autoconf to produce a configure script.
AC_INIT(markers/markers.c)
AM_INIT_AUTOMAKE(Display,1.3.1)


dnl Checks for programs.
AC_PROG_CC
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Use libtool for linking
AM_PROG_LIBTOOL

dnl Find all the X stuff
AC_PATH_XTRA

dnl Add extra include or link directories
AC_ARG_WITH(build-path,[
  --with-build-path[=DIR] use DIR/include DIR/lib
],[
for d in `echo $withval | tr : ' '`; do
    test -d $d/include && CPPFLAGS="$CPPFLAGS -I$d/include"
    test -d $d/lib && LDFLAGS="$LDFLAGS -L$d/lib"
done
])

dnl Checks for header files.


dnl Checks for libraries.

smr_CHECK_LIB(netcdf,,
[NetCDF library], ncopen, netcdf.h)
if test "$netcdf_LIBS" = ""; then
    AC_MSG_ERROR([Required library NetCDF not found!])
fi

smr_CHECK_LIB(minc,,
[MNI medical image library], miicv_create, minc.h, 
$netcdf_LIBS, $netcdf_CFLAGS)
if test "$minc_LIBS" = ""; then
    AC_MSG_ERROR([Required library minc not found!])
fi

smr_CHECK_LIB(volumeio,volume_io,
[MNI Volume IO library], input_volume, volume_io.h,
[$minc_LIBS $netcdf_LIBS -lm],[$netcdf_CFLAGS $minc_CFLAGS])
if test "$volumeio_LIBS" = ""; then
    AC_MSG_ERROR([Required library volume_io not found!])
fi

smr_CHECK_LIB(bicpl,,
[BIC Programming library], input_graphics_file, bicpl.h,
[$volumeio_LIBS $minc_LIBS $netcdf_LIBS -lm],[$netcdf_CFLAGS $minc_CFLAGS $volumeio_CFLAGS])
if test "$bicpl_LIBS" = ""; then
    AC_MSG_ERROR([Required library bicpl not found!])
fi

MNI_INCLUDES="$bicpl_CFLAGS $volumeio_CFLAGS $minc_CFLAGS $netcdf_CFLAGS"
MNI_LIBS="$bicpl_LIBS $volumeio_LIBS $minc_LIBS $netcdf_LIBS"

# Handle installed libtool-built libraries.  Libtool installs, in addition to 
# the regular file (e.g. libfoo.a), a file named "libfoo.la".  This file has
# extra information that can be used by libtool to supply useful linker
# options.  For this to work, we need to change '-lfoo' into the full pathname
# to the ".la" file.
# 
# Do this for $MNI_LIBS.
#
AC_MSG_RESULT(Checking for libtool libraries)
AC_MSG_RESULT(MNI_LIBS before: $MNI_LIBS)
dirlist=
newlibs=
proc_mni_libs=no
for x in $LDFLAGS -- $MNI_LIBS; do
    case $x in
	-L*) dir=`echo $x | sed 's/^-L//'`
	     dirlist="$dirlist $dir"
	     ;;
	-l*) lib=`echo $x | sed 's/^-l//'`
	     for dir in $dirlist; do
		if test -r $dir/lib${lib}.a -a -r $dir/lib${lib}.la; then
		    x=$dir/lib${lib}.la
		fi
	     done
	     ;;
    esac
    if test $proc_mni_libs = yes; then
        newlibs="$newlibs $x"
    elif test $x = --; then
	proc_mni_libs=yes
    fi
done
MNI_LIBS=$newlibs
AC_MSG_RESULT(MNI_LIBS after: $MNI_LIBS)

AC_SUBST(MNI_INCLUDES)
AC_SUBST(MNI_LIBS)


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
smr_CHECK_LIB(malloc,,
[Extended Malloc library], mallinfo, malloc.h)
if test "$malloc_LIBS"; then
    AC_DEFINE(HAVE_MALLINFO)
    AC_SUBST(malloc_CFLAGS)
    AC_SUBST(malloc_LIBS)
fi


AC_OUTPUT(Makefile
Graphics/Makefile
Graphics/GLUT_windows/Makefile
Graphics/G_graphics/Makefile
Graphics/OpenGL_graphics/Makefile
atlas/Makefile
callbacks/Makefile
current_obj/Makefile
cursor/Makefile
cursor_contours/Makefile
edit_surface/Makefile
events/Makefile
images/Makefile
immediate_mode/Makefile
input_files/Makefile
intersect/Makefile
main/Makefile
markers/Makefile
menu/Makefile
segmenting/Makefile
slice_window/Makefile
structures/Makefile
surface_curves/Makefile
surface_extraction/Makefile
tubes/Makefile
voxel_scan/Makefile
)
